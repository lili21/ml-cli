#!/usr/bin/env node
var program = require('commander');
var rm = require('rimraf').sync;
var download = require('download-git-repo');
var uid = require('uid');
var chalk = require('chalk');
var path = require('path');
var exists = require('fs').existsSync;
var logger = require('../lib/logger');
var generate = require('../lib/generate');

program
  .usage('<template-name> [project-name]')
  .on('--help', function() {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create a new project'))
    console.log('    $ ml init my-project')
    console.log()
  })
  .parse(process.argv);

if (program.args.length < 1) {
  return program.help();
}

console.log();
process.on('exit', function() {
  console.log();
});

var template = program.args[0];
var name = program.args[1];

var dest = path.resolve(name);

if (exists(dest)) {
  logger.fatal('"%s" already exists', name);
}

download('lili21/ml-template-' + template, '/tmp', function (err) {
  if (err) {
    logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim());
  }
  generate(name, tmp, dest, function(err) {
    if (err) {
      logger.fatal(err);
    }
    console.log();
    rm('/tmp');
    logger.success('Generated "%s".', name);
  });
});

/*
if (exists(template)) {
  generate(name, template, dest, function(err) {
    if (err) {
      logger.fatal(err);
    }
    console.log();
    logger.success('Generated "%s".', name);
  });
}*/
